##############################
다양한 편집 모드 활성화하기
##############################

지금까지는 그리드에서 데이터를 출력하는 기능만 사용해보았습니다.
가계부에서는 데이터를 수정할 수 있어야 하므로, 그리드에서 제공하는 ``editOptions`` 옵션을 사용해 다양한 편집 모드를 활성화해봅니다.

각 카테고리에서 필요로 하는 편집 모드는 다음과 같습니다.

* 날짜 : 데이트 피커
* 내역 : 셀렉트 박스
* 비고 : 텍스트 인풋
* 결제 방식 : 체크박스
* 금액 : 텍스트 인풋

카테고리별로 편집 모드를 적용해보겠습니다.
``columnData`` 의 각 카테고리 정보에 해당하는 객체에 ``editOptions`` 옵션을 순서대로 추가해봅니다.


텍스트 인풋 옵션 사용하기
==============================

- 적용 컬럼 : '비고', '금액'

가장 기본적인 인풋 타입으로, ``editOptions`` 의 타입 값을 텍스트로 지정(``type: 'text'``)하면 됩니다.

.. code-block:: javascript

    ...

    const columnData = [
      ...
      {
        title: '비고',
        name: 'category2',
        editOptions: {
          type: 'text'
        }
      },
      ...
      {
        title: '금액',
        name: 'amount',
        editOptions: {
          type: 'text'
        }
      }
    ];


셀렉트 박스, 체크박스 인풋 옵션 사용하기
=========================================

- 적용 컬럼 : '내역', '결제 방식'

데이터가 될 값을 여러 개의 값 중에서 선택하려고 할 때 사용합니다.
텍스트 인풋처럼 타입을 지정해주면 됩니다.
셀렉트 박스의 타입은 ``'select'`` , 체크박스의 타입은 ``'checkbox'`` 입니다.

.. code-block:: javascript

    ...

    const columnData = [
      ...
      {
        title: '내역',
        name: 'category1',
        editOptions: {
          type: 'select',
          listItems: [
            {
              text: '선택 안함',
              value: '0'
            },
            {
              text: '식비',
              value: '1'
            },
            {
              text: '문화 생활비',
              value: '2'
            },
            {
              text: '교통비',
              value: '3'
            },
            {
              text: '관리비',
              value: '4'
            }
          ]
        }
      },
      ...
      {
        title: '결제 방식',
        name: 'payment',
        editOptions: {
          type: 'checkbox',
          listItems: [
            {
              text: '현금',
              value: '1'
            },
            {
              text: '체크카드',
              value: '2'
            },
            {
              text: '신용카드',
              value: '3'
            },
            {
              text: '페이코',
              value: '4'
            }
          ]
        }
      },
      ...
    ];


이때 주의할 사항이 있습니다.
텍스트 인풋을 제외한 다른 편집 타입의 경우 데이터 형식을 변경해야 합니다.

예를 들어 체크박스를 사용하는 컬럼 데이터는, ``editOptions.listItems`` 에 설정된 각 리스트의 값(``value``) 중 하나와 일치해야 합니다.
다음과 같이 데이터를 변경해봅니다.

.. code-block:: javascript

    ...

    const rowData = [
      {
        date: '2018-11-19',
        category1: '1', // '식비' -> '1' 변경
        category2: '회사 편의점',
        payment: '4', // '페이코' -> '4 변경
        amount: '5000'
      }
    ];


useViewMode 옵션 사용하기
==============================

- 적용 컬럼 : '내역', '결제 방식'

편집 모드를 추가한 다음 데이터를 편집하기 위해서는 셀을 더블클릭합니다.
이것이 기본 동작이며, 처음부터 셀에 편집 모드를 노출하고 싶다면 다음과 같이 각 ``editOptions`` 마다 ``useViewMode: false`` 로 뷰 모드를 비활성화해야 합니다.
사용 용도에 맞게 수정해봅니다.

.. code-block:: javascript

    ...

    const columnData = [
      ...
      {
        title: '내역',
        ...
        editOptions: {
          type: 'select',
          useViewMode: false, // 추가
          ...
      },
      ...
      {
        title: '결제 방식',
        ...
        editOptions: {
          type: 'checkbox',
          useViewMode: false, // 추가
          ...
        }
      },
      ...
    ];


데이트 피커 컴포넌트 사용하기
==============================

- 적용 컬럼 : '날짜'

텍스트 인풋을 사용하면서 텍스트 인풋이 선택되었을 때 레이어를 띄워 날짜를 선택할 수 있도록 변경해보겠습니다.

그리드에서는 `TOAST UI DatePicker <https://github.com/nhnent/tui.date-picker>`_ 컴포넌트를 사용하여 날짜를 선택할 수 있는 기능을 제공합니다.
``editOptions`` 옵션과 함께 ``component`` 옵션을 추가로 설정하면 됩니다.

.. code-block:: javascript

    ...

    const columnData = [
      {
        title: '날짜',
        name: 'date',
        editOptions: {
          type: 'text'
        },
        component: {
          name: 'datePicker',
          options: {
            format: 'yyyy-MM-dd'
          }
        }
      },
      ...
    ];


또한 컴포넌트를 사용하기 위해서는 반드시 스타일을 추가해야 합니다.
다음과 같이 파일 상단에서 그리드의 스타일을 가져오는 코드 아래에 데이트 피커의 스타일을 추가해줍니다.

.. code-block:: javascript

    ...

    import 'tui-grid/dist/tui-grid.css';
    import 'tui-date-picker/dist/tui-date-picker.css'; // 데이트 피커 스타일 추가

    const options = {
      ...
      ...


이 외 다른 편집 모드를 추가하고 싶다면 아래 링크를 참고하여 추가해봅니다.

- https://github.com/nhnent/tui.grid/blob/master/docs/input-types.md


결과 화면
==============================

.. image:: _static/step05.png
