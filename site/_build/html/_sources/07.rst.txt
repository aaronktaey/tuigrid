##############################
서버 연동하기 (기본)
##############################

지금까지 로컬 데이터를 가져와 그리드를 생성하고 사용해 보았습니다.
API를 직접 호출하여 서버 연동 과정을 구현할 수도 있지만, 그리드에서 제공하는 모듈을 사용해 좀 더 편리하게 서버 연동을 처리할 수 있습니다.

테스트용 API 서버 설정하기
==============================

지금부터는 외부 API를 호출해 그리드 데이터를 가져오는 작업을 처리해보겠습니다.
API를 호출할 수 있도록 로컬에서 서버를 실행해봅니다.
이 API 서버는 `express <http://expressjs.com/>`_ 를 사용합니다.

터미널을 새로 열고 개발 서버를 실행했던 것과 같이 프로젝트 폴더 위치에서 다음 명령어를 실행합니다.

.. code-block:: shell

  cd hands-on-labs.toastui.grid-account-book
  npm run api


다음과 같이 메시지가 출력되면 API 서버가 정상적으로 실행되고 호출할 수 있습니다.
API 서버 URL은 ``http://localhost:3000/`` 으로 호출됩니다.

.. image:: _static/step07-1.png


Net 활성화하기
==============================

`Net <http://nhnent.github.io/tui.grid/latest/addon_net>`_ 은 그리드에서 서버와 연동하여 데이터를 처리할 수 있도록 도와주는 모듈입니다.
그리드의 ``use`` API를 사용하여 해당 모듈을 활성화하며, CRUD 동작을 처리하기 위해 옵션들을 설정할 수 있습니다.

- 참고 : https://github.com/nhnent/tui.grid/blob/master/docs/binding-to-remote-data.md

먼저, Net을 활성화하고 **데이터를 읽어오는 동작(Read)** 을 구현해봅니다.

* 옵션 정보
    * ``api`` : 호출할 API의 URL을 설정합니다.
    * ``readDataMethod`` : API 호출 방식(GET 또는 POST)을 결정합니다.

.. code-block:: javascript

    grid.use('Net', {
      api: {
        readData: 'http://localhost:3000/api/readData'
      },
      readDataMethod: 'POST'
    });


서버 요청 & 응답 확인하기
==============================

Net을 활성화하고 페이지를 로드하면 ``api.readData`` 옵션에 설정된 API를 호출합니다.
정상적으로 요청이 일어난 다음 그리드 내부에서는 로컬 데이터 대신 API의 응답 데이터를 사용하도록 처리됩니다.

이제 서버측 데이터를 사용하므로, ``data`` 옵션으로 초기화하던 로컬 데이터에 대한 코드를 제거합니다.

.. code-block:: javascript

    const rowData = [ ... ]; // 제거

    const grid = new Grid({
      ...
      data: rowData, // 제거
      ...
    });


서버 요청과 응답이 잘 동작하였다면 아래와 같이 3개의 행의 생성됩니다.
실제 서버 요청 및 응답 상태는 '개발자 도구 > 네트워크' 탭에서 확인할 수 있습니다.


결과 화면
==============================

.. image:: _static/step07-2.png
